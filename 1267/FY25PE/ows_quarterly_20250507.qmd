---
title: "ows_quarterly"
format: html
---

```{r}
#| include: false
library(tidyverse)
library(readxl)
```

### Import Level and Rain Data

```{r}
# Read in level data
dash2_cs1 <- read_rds("data/1267-2_CS1_level.rds")
dash2_cs2 <- read_rds("data/1267-2_CS2_level.rds")

# Read rainfall CSV
rain_data <- read_csv("data/1267-2-1_2024-03-01_to_2025-09-28_rainfall.csv") |>
  select(dtime, rainfall_in) |>
  # Change time zone without affecting values
  mutate(dtime =  force_tz(dtime, tz = "EST")) 
```

### Key Elevations

```{r}
cs1_elev <- c(
  "rim" =  65.16,
  "top_stone" =  62,
  "top_weir" = 59.69,
  "weir_key" = 59,
  "inflow_inv_15" = 57.48,
  "outflow_iso_inv_24" = 57.02,
  "outflow_man_inv_12" = 57.15,
  "bottom_stone" = 58.50,
  "bottom_sensor" = 56.06,
  "bottom_struct" = 56.91)

cs2_elev <- c(
  "rim" = 64.78,
  "top_stone" = 62,
  "top_weir" = 59.93,
  "inflow_inv_30" = 57.99,
  "orifice_inv" = 55.86,
  "inflow_inv_8" = 56.66,
  "outflow_inv_12" = 56.41,
  "bottom_stone" = 57.15,
  "bottom_sensor" = 55.41,
  "bottom_struct" = 55.18
)
```

```{r}
# Adjust level for outflow invert to be zero
cs1_wlvl <- dash2_cs1 |>
  # Add the difference between outflow and bottom of sensor to water level
  mutate(cs1_cwlevel = water_level + (cs2_elev[["outflow_inv_12"]] - cs1_elev[["bottom_sensor"]])) |>
  select(dtime, cs1_cwlevel)

cs2_wlvl <- dash2_cs2 |>
  mutate(cs2_cwlevel = water_level + (cs2_elev[["outflow_inv_12"]] - cs2_elev[["bottom_sensor"]])) |>
  select(dtime, cs2_cwlevel)
  

# Combine each OW data into one df
ow_comb <- cs1_wlvl |>
  left_join(cs2_wlvl, by = join_by(dtime == dtime)) |>
  na.omit()


# Combine level and rain dfs
ow_comb <- ow_comb |>
  left_join(rain_data, by = join_by(dtime == dtime)) |>
  # Turn rainfall NA to zero
  mutate(rainfall_in = if_else(is.na(rainfall_in), 0, rainfall_in))

```

```{r}
# OW2 plot before maintenance
ow_preevent <- ggplot(ow_comb |> 
                      dplyr::filter(
                        between(dtime, 
                                ymd_hms("2025-01-01 00:00:00"),
                                ymd_hms("2025-04-01 00:00:00")
                                )),
                      aes(x = dtime)) +
   # geom_ribbon(aes(ymin = 0, ymax = 3.17), fill = "lightblue", alpha = 0.4) +
  # CS1 water level
  geom_line(aes(y = cs1_cwlevel, color = "CS1 Water Level"),
            linewidth = 1.1) +
  # CS2 water level
  geom_line(aes(color = "CS2 Water Level", y = cs2_cwlevel),
            linewidth = 1.1) +
  # CS1 Weir Height
  geom_hline(aes(yintercept = cs1_elev[["top_weir"]] - cs2_elev[["outflow_inv_12"]]),
             linewidth = 0.6,
             linetype = "dashed")  +
  annotate("text", x =  ymd_hms("2025-01-05 06:00:00"),
           y =  cs1_elev[["top_weir"]] - cs2_elev[["outflow_inv_12"]] - 0.2,
           label = "CS1 Top of Weir",
           hjust = 0) +
  # CS1 Weir Key
  geom_hline(aes(yintercept = cs1_elev[["weir_key"]] - cs2_elev[["outflow_inv_12"]]),
             linewidth = 0.6,
             linetype = "dashed")  +
  annotate("text", x =  ymd_hms("2025-01-05 06:00:00"),
           y =  cs1_elev[["weir_key"]] - cs2_elev[["outflow_inv_12"]] - 0.2,
           label = "CS1 Weir Key",
           hjust = 0) +
  # CS1 Inflow
  geom_hline(aes(yintercept = cs1_elev[["inflow_inv_15"]] - cs2_elev[["outflow_inv_12"]]),
             linewidth = 0.6,
             linetype = "dashed")  +
  annotate("text", x =  ymd_hms("2025-01-05 06:00:00"),
           y =  cs1_elev[["inflow_inv_15"]] - cs2_elev[["outflow_inv_12"]] + 0.2,
           label = "CS1 Inflow Invert",
           hjust = 0) +
    # CS1 Outflow
  geom_hline(aes(yintercept = cs1_elev[["outflow_iso_inv_24"]] - cs2_elev[["outflow_inv_12"]]),
             linewidth = 0.6,
             linetype = "dashed")  +
  annotate("text", x =  ymd_hms("2025-01-05 06:00:00"),
           y =  cs1_elev[["outflow_iso_inv_24"]] - cs2_elev[["outflow_inv_12"]] - 0.2,
           label = "CS1 ISO Invert",
           hjust = 0) +
    # CS1 Outflow Manifold
  geom_hline(aes(yintercept = cs1_elev[["outflow_man_inv_12"]] - cs2_elev[["outflow_inv_12"]]),
             linewidth = 0.6,
             linetype = "dashed")  +
  annotate("text", x =  ymd_hms("2025-01-05 06:00:00"),
           y =  cs1_elev[["outflow_man_inv_12"]] - cs2_elev[["outflow_inv_12"]] + 0.2,
           label = "CS1 Manifold Invert",
           hjust = 0) +
  
  
      # CS2 Weir Height
  geom_hline(aes(yintercept = cs2_elev[["top_weir"]] - cs2_elev[["outflow_inv_12"]]),
             linewidth = 0.6,
             linetype = "dotted")  +
  annotate("text", x =  ymd_hms("2025-03-05 06:00:00"),
           y =  cs2_elev[["top_weir"]] - cs2_elev[["outflow_inv_12"]] + 0.2,
           label = "CS2 Top of Weir",
           hjust = 0) +
  geom_hline(aes(yintercept = cs2_elev[["inflow_inv_30"]] - cs2_elev[["outflow_inv_12"]]),
           linewidth = 0.6,
           linetype = "dotted")  +
annotate("text", x =  ymd_hms("2025-03-05 06:00:00"),
         y =  cs2_elev[["inflow_inv_30"]] - cs2_elev[["outflow_inv_12"]] - 0.2,
         label = "CS2 Inflow Inv",
         hjust = 0) +
  geom_hline(aes(yintercept = cs2_elev[["orifice_inv"]] - cs2_elev[["outflow_inv_12"]]),
           linewidth = 0.6,
           linetype = "dotted")  +
annotate("text", x =  ymd_hms("2025-03-05 06:00:00"),
         y =  cs2_elev[["orifice_inv"]] - cs2_elev[["outflow_inv_12"]] - 0.2,
         label = "CS2 Orifice Inv",
         hjust = 0) +
  geom_hline(aes(yintercept = cs2_elev[["inflow_inv_8"]] - cs2_elev[["outflow_inv_12"]]),
         linewidth = 0.6,
         linetype = "dotted")  +
annotate("text", x =  ymd_hms("2025-03-05 06:00:00"),
       y =  cs2_elev[["inflow_inv_8"]] - cs2_elev[["outflow_inv_12"]] + 0.2,
       label = "CS2 Inflow Inv 8",
       hjust = 0) +
  geom_hline(aes(yintercept = cs2_elev[["outflow_inv_12"]] - cs2_elev[["outflow_inv_12"]]),
         linewidth = 0.6,
         linetype = "dotted")  +
annotate("text", x =  ymd_hms("2025-03-05 06:00:00"),
       y =  cs2_elev[["outflow_inv_12"]] - cs2_elev[["outflow_inv_12"]] - 0.2,
       label = "CS2 Outflow Inv",
       hjust = 0) +
  # Bottom of pipe bedding elevation
  # geom_hline(yintercept = 0.0,
  #            linetype = "dashed") +
  # annotate("text", x =  ymd_hms("2025-02-25 06:00:00"),
  #          y = .29, 
  #          label = "Bottom of pipe bedding",
  #          hjust = 0) +
  # OW2 top of storage elevation
  # geom_hline(yintercept = 3.17, linetype = "dashed") +
  #   annotate("text",
  #            x =  ymd_hms("2025-02-25 06:00:00"),
  #            y = 3.37,
  #            label = "Top of Stone Storage",
  #            hjust = 0) +
  #   geom_hline(yintercept = 0.0) +
  # annotate("text", x =  ymd_hms("2025-02-25 06:00:00"),
  #          y = -0.1, 
  #          label = "Bottom of Stone Storage",
  #          hjust = 0) +
  # # # OW1 top of storage elevation
  # #   geom_hline(yintercept = 4.25, linetype = "dashed") +
  # #   annotate("text",
  # #            x =  ymd_hms("2025-02-25 06:00:00"),
  # #            y = 4.50, 
  # #            label = "Top of Storage (OW1)",
  # #            hjust = 0) +
  # # Zoom level for plot 
  coord_cartesian(ylim = c(-.5, 6.5)) +
  labs(
    x = "Date",
    y = "Water level (ft)",
    color = NULL,
    title = "1267-2-1 Water Level Response (15-minute interval)"
  )  +
  theme(legend.position = "bottom") +
  # Color for water levels
   scale_color_manual(values = c(
    "CS1 Water Level" = "cornflowerblue",
    "CS2 Water Level" = "#2a3782")) +
  # Set y-axis formating to match rain
  scale_y_continuous(labels = function(x) sprintf("%.2f", x))
  
# Rain plot
rainfall_pre <- ggplot(ow_comb |>
                         # 3-hour interval to show all events
                         group_by(hour = lubridate::floor_date(dtime, "3 hour")) |>
                         summarize(hr_rain = sum(rainfall_in))|> 
                         dplyr::filter(
                           between(hour, 
                                ymd_hms("2025-01-01 00:00:00"),
                                ymd_hms("2025-04-01 00:00:00")
                                )),
                   aes(y = hr_rain)) +
  geom_col(aes(hour)) + 
  scale_y_continuous(lim = c(0, 2)) +
  labs(
    x = NULL,
    y = "Rainfall (in)",
    title = "1140-3-2 Rainfall (3-hour interval)"
  )

  # Combine into one plot
cowplot::plot_grid(rainfall_pre, ow_preevent,
                   nrow = 2,
                   rel_heights = c(1,3),
                   rel_widths = c(1,1)
                   )
```
